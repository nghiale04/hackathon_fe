import { useState } from "react";
import {
  CheckCircle,
  ArrowRight,
  RefreshCw,
  Home,
  Users,
  Heart,
  Book,
  Globe,
  MoreHorizontal,
  ChevronLeft,
} from "lucide-react";
import AssessmentResult from "../components/AssessmentResult";
import "../styles/assessment.css";

// Categories for mental health assessment
const categories = [
  {
    id: "family",
    title: "Gia ƒë√¨nh",
    icon: Home,
    description:
      "ƒê√°nh gi√° v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn gia ƒë√¨nh v√† m·ªëi quan h·ªá trong nh√†",
    color: "#FF6B6B",
    questions: [
      {
        id: 1,
        question:
          "B·∫°n c·∫£m th·∫•y th·∫ø n√†o v·ªÅ m·ªëi quan h·ªá v·ªõi c√°c th√†nh vi√™n trong gia ƒë√¨nh?",
        options: [
          {
            id: "a",
            text: "R·∫•t t·ªët, lu√¥n ƒë∆∞·ª£c y√™u th∆∞∆°ng v√† h·ªó tr·ª£",
            emoji: "üòä",
          },
          { id: "b", text: "Kh√° t·ªët, ƒë√¥i khi c√≥ xung ƒë·ªôt nh·ªè", emoji: "üôÇ" },
          {
            id: "c",
            text: "Kh√¥ng t·ªët l·∫Øm, th∆∞·ªùng xuy√™n c√≥ m√¢u thu·∫´n",
            emoji: "üòî",
          },
          {
            id: "d",
            text: "R·∫•t t·ªá, lu√¥n c·∫£m th·∫•y cƒÉng th·∫≥ng v√† √°p l·ª±c",
            emoji: "üò¢",
          },
        ],
      },
      {
        id: 2,
        question: "B·∫°n c√≥ th∆∞·ªùng xuy√™n chia s·∫ª c·∫£m x√∫c v·ªõi gia ƒë√¨nh kh√¥ng?",
        options: [
          { id: "a", text: "Lu√¥n chia s·∫ª m·ªçi ƒëi·ªÅu", emoji: "üí¨" },
          { id: "b", text: "Th·ªânh tho·∫£ng chia s·∫ª", emoji: "üó£Ô∏è" },
          { id: "c", text: "Hi·∫øm khi chia s·∫ª", emoji: "ü§ê" },
          { id: "d", text: "Kh√¥ng bao gi·ªù chia s·∫ª", emoji: "üö´" },
        ],
      },
    ],
  },
  {
    id: "friends",
    title: "B·∫°n b√®",
    icon: Users,
    description: "ƒê√°nh gi√° v·ªÅ c√°c m·ªëi quan h·ªá b·∫°n b√® v√† t∆∞∆°ng t√°c x√£ h·ªôi",
    color: "#4ECDC4",
    questions: [
      {
        id: 1,
        question: "B·∫°n c√≥ nhi·ªÅu b·∫°n b√® th√¢n thi·∫øt kh√¥ng?",
        options: [
          {
            id: "a",
            text: "C√≥ nhi·ªÅu b·∫°n th√¢n v√† lu√¥n ƒë∆∞·ª£c h·ªó tr·ª£",
            emoji: "üë•",
          },
          { id: "b", text: "C√≥ m·ªôt v√†i ng∆∞·ªùi b·∫°n th√¢n", emoji: "üë´" },
          { id: "c", text: "C√≥ √≠t b·∫°n b√® th√¢n thi·∫øt", emoji: "üë§" },
          { id: "d", text: "Kh√¥ng c√≥ b·∫°n b√® th√¢n thi·∫øt", emoji: "üòî" },
        ],
      },
    ],
  },
  {
    id: "relationship",
    title: "T√¨nh c·∫£m",
    icon: Heart,
    description: "ƒê√°nh gi√° v·ªÅ c√°c v·∫•n ƒë·ªÅ t√¨nh c·∫£m v√† m·ªëi quan h·ªá l√£ng m·∫°n",
    color: "#FF9F1C",
    questions: [
      {
        id: 1,
        question: "B·∫°n c√≥ h√†i l√≤ng v·ªõi m·ªëi quan h·ªá t√¨nh c·∫£m hi·ªán t·∫°i kh√¥ng?",
        options: [
          { id: "a", text: "R·∫•t h√†i l√≤ng v√† h·∫°nh ph√∫c", emoji: "‚ù§Ô∏è" },
          { id: "b", text: "Kh√° h√†i l√≤ng", emoji: "üíï" },
          { id: "c", text: "Kh√¥ng h√†i l√≤ng l·∫Øm", emoji: "üíî" },
          { id: "d", text: "R·∫•t kh√¥ng h√†i l√≤ng", emoji: "üò¢" },
        ],
      },
    ],
  },
  {
    id: "study",
    title: "H·ªçc t·∫≠p",
    icon: Book,
    description: "ƒê√°nh gi√° v·ªÅ √°p l·ª±c h·ªçc t·∫≠p v√† ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai",
    color: "#2EC4B6",
    questions: [
      {
        id: 1,
        question: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y √°p l·ª±c trong h·ªçc t·∫≠p kh√¥ng?",
        options: [
          { id: "a", text: "Hi·∫øm khi, lu√¥n c√¢n b·∫±ng t·ªët", emoji: "üòä" },
          {
            id: "b",
            text: "Th·ªânh tho·∫£ng, nh∆∞ng c√≥ th·ªÉ ki·ªÉm so√°t",
            emoji: "üòå",
          },
          { id: "c", text: "Th∆∞·ªùng xuy√™n, kh√≥ ki·ªÉm so√°t", emoji: "üò∞" },
          { id: "d", text: "Lu√¥n lu√¥n, r·∫•t cƒÉng th·∫≥ng", emoji: "üò´" },
        ],
      },
    ],
  },
  {
    id: "social",
    title: "M·∫°ng x√£ h·ªôi",
    icon: Globe,
    description: "ƒê√°nh gi√° v·ªÅ ·∫£nh h∆∞·ªüng c·ªßa m·∫°ng x√£ h·ªôi ƒë·∫øn cu·ªôc s·ªëng",
    color: "#E71D36",
    questions: [
      {
        id: 1,
        question: "M·∫°ng x√£ h·ªôi ·∫£nh h∆∞·ªüng th·∫ø n√†o ƒë·∫øn cu·ªôc s·ªëng c·ªßa b·∫°n?",
        options: [
          { id: "a", text: "T√≠ch c·ª±c, gi√∫p k·∫øt n·ªëi v√† h·ªçc h·ªèi", emoji: "üëç" },
          { id: "b", text: "C√≥ c·∫£ t√≠ch c·ª±c v√† ti√™u c·ª±c", emoji: "ü§î" },
          { id: "c", text: "Ti√™u c·ª±c nhi·ªÅu h∆°n t√≠ch c·ª±c", emoji: "üëé" },
          {
            id: "d",
            text: "R·∫•t ti√™u c·ª±c, ·∫£nh h∆∞·ªüng x·∫•u ƒë·∫øn cu·ªôc s·ªëng",
            emoji: "üòû",
          },
        ],
      },
    ],
  },
  {
    id: "other",
    title: "Kh√°c",
    icon: MoreHorizontal,
    description: "ƒê√°nh gi√° v·ªÅ c√°c v·∫•n ƒë·ªÅ kh√°c trong cu·ªôc s·ªëng",
    color: "#6C63FF",
    questions: [
      {
        id: 1,
        question: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y lo l·∫Øng v·ªÅ t∆∞∆°ng lai kh√¥ng?",
        options: [
          { id: "a", text: "Hi·∫øm khi, lu√¥n l·∫°c quan", emoji: "üòä" },
          {
            id: "b",
            text: "Th·ªânh tho·∫£ng, nh∆∞ng v·∫´n ki·ªÉm so√°t ƒë∆∞·ª£c",
            emoji: "üòå",
          },
          { id: "c", text: "Th∆∞·ªùng xuy√™n, kh√≥ ki·ªÉm so√°t", emoji: "üò∞" },
          { id: "d", text: "Lu√¥n lu√¥n, r·∫•t lo l·∫Øng", emoji: "üò´" },
        ],
      },
    ],
  },
];

// Results based on category and answers
const results = {
  family: {
    a: {
      title: "M·ªëi quan h·ªá gia ƒë√¨nh t·ªët",
      description:
        "B·∫°n c√≥ m·ªëi quan h·ªá gia ƒë√¨nh r·∫•t t·ªët. H√£y ti·∫øp t·ª•c duy tr√¨ v√† ph√°t tri·ªÉn c√°c m·ªëi quan h·ªá n√†y.",
      recommendations: [
        "D√†nh th·ªùi gian ch·∫•t l∆∞·ª£ng cho gia ƒë√¨nh",
        "Ti·∫øp t·ª•c chia s·∫ª v√† l·∫Øng nghe",
        "T·ªï ch·ª©c c√°c ho·∫°t ƒë·ªông gia ƒë√¨nh th∆∞·ªùng xuy√™n",
      ],
    },
    b: {
      title: "M·ªëi quan h·ªá gia ƒë√¨nh kh√° t·ªët",
      description:
        "M·ªëi quan h·ªá gia ƒë√¨nh c·ªßa b·∫°n kh√° ·ªïn, nh∆∞ng c√≥ th·ªÉ c·∫£i thi·ªán th√™m.",
      recommendations: [
        "C·∫£i thi·ªán giao ti·∫øp trong gia ƒë√¨nh",
        "Gi·∫£i quy·∫øt c√°c xung ƒë·ªôt nh·ªè k·ªãp th·ªùi",
        "TƒÉng c∆∞·ªùng c√°c ho·∫°t ƒë·ªông gia ƒë√¨nh",
      ],
    },
    c: {
      title: "C·∫ßn c·∫£i thi·ªán m·ªëi quan h·ªá gia ƒë√¨nh",
      description: "B·∫°n ƒëang g·∫∑p m·ªôt s·ªë v·∫•n ƒë·ªÅ trong m·ªëi quan h·ªá gia ƒë√¨nh.",
      recommendations: [
        "T√¨m hi·ªÉu nguy√™n nh√¢n c·ªßa m√¢u thu·∫´n",
        "H·ªçc c√°ch giao ti·∫øp hi·ªáu qu·∫£",
        "T√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° t·ª´ chuy√™n gia n·∫øu c·∫ßn",
      ],
    },
    d: {
      title: "M·ªëi quan h·ªá gia ƒë√¨nh c·∫ßn ƒë∆∞·ª£c quan t√¢m",
      description:
        "M·ªëi quan h·ªá gia ƒë√¨nh c·ªßa b·∫°n ƒëang g·∫∑p nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng.",
      recommendations: [
        "T√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° t·ª´ chuy√™n gia t√¢m l√Ω",
        "Tham gia c√°c bu·ªïi t∆∞ v·∫•n gia ƒë√¨nh",
        "H·ªçc c√°ch ƒë·∫∑t ranh gi·ªõi l√†nh m·∫°nh",
      ],
    },
  },
  // ... Similar result structures for other categories
};

function Assessment() {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [showResults, setShowResults] = useState(false);

  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
  };

  const handleAnswer = (questionId, optionId) => {
    setAnswers({
      ...answers,
      [questionId]: optionId,
    });
  };

  const handleNext = () => {
    if (currentQuestion < selectedCategory.questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResults(true);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const resetAssessment = () => {
    setSelectedCategory(null);
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
  };

  const isQuestionAnswered = (questionId) => {
    return answers[questionId] !== undefined;
  };

  const progressPercentage = selectedCategory
    ? ((currentQuestion + 1) / selectedCategory.questions.length) * 100
    : 0;

  return (
    <main className="assessment-main">
      <div className="assessment-card">
        {!selectedCategory ? (
          <div className="category-selection">
            <h2>Ch·ªçn lƒ©nh v·ª±c b·∫°n mu·ªën ƒë√°nh gi√°</h2>
            <div className="category-grid">
              {categories.map((category) => {
                const Icon = category.icon;
                return (
                  <div
                    key={category.id}
                    className="category-card"
                    onClick={() => handleCategorySelect(category)}
                    style={{ backgroundColor: category.color }}
                  >
                    <Icon className="category-icon" />
                    <h3>{category.title}</h3>
                    <p>{category.description}</p>
                  </div>
                );
              })}
            </div>
          </div>
        ) : !showResults ? (
          <>
            <div className="assessment-progress">
              <div className="progress-bar">
                <div
                  className="progress-fill"
                  style={{ width: `${progressPercentage}%` }}
                ></div>
              </div>
              <div className="progress-text">
                C√¢u h·ªèi {currentQuestion + 1} tr√™n{" "}
                {selectedCategory.questions.length}
              </div>
            </div>

            <div className="question-container">
              <button
                className="back-button"
                onClick={() => setSelectedCategory(null)}
              >
                <ChevronLeft className="back-icon" />
                Quay l·∫°i
              </button>

              <h2 className="question-text">
                {selectedCategory.questions[currentQuestion].question}
              </h2>

              <div className="options-container">
                {selectedCategory.questions[currentQuestion].options.map(
                  (option) => (
                    <div
                      key={option.id}
                      className={`option ${
                        answers[
                          selectedCategory.questions[currentQuestion].id
                        ] === option.id
                          ? "selected"
                          : ""
                      }`}
                      onClick={() =>
                        handleAnswer(
                          selectedCategory.questions[currentQuestion].id,
                          option.id
                        )
                      }
                    >
                      <div className="option-emoji">{option.emoji}</div>
                      <div className="option-text">{option.text}</div>
                      {answers[
                        selectedCategory.questions[currentQuestion].id
                      ] === option.id && <CheckCircle className="check-icon" />}
                    </div>
                  )
                )}
              </div>
            </div>

            <div className="assessment-actions">
              <button
                className="action-button secondary"
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
              >
                Quay v·ªÅ c√¢u tr∆∞·ªõc
              </button>
              <button
                className="action-button primary"
                onClick={handleNext}
                disabled={
                  !isQuestionAnswered(
                    selectedCategory.questions[currentQuestion].id
                  )
                }
              >
                {currentQuestion < selectedCategory.questions.length - 1
                  ? "Ti·∫øp theo"
                  : "Xem k·∫øt qu·∫£"}
                {currentQuestion < selectedCategory.questions.length - 1 && (
                  <ArrowRight className="button-icon" />
                )}
              </button>
            </div>
          </>
        ) : (
          <AssessmentResult
            answers={answers}
            category={selectedCategory}
            onReset={resetAssessment}
          />
        )}
      </div>
    </main>
  );
}

export default Assessment;
