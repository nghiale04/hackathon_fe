import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Link } from "react-router-dom";
import axios from "axios";
import {
  CheckCircle,
  ArrowRight,
  RefreshCw,
  Home,
  Users,
  Heart,
  Book,
  Globe,
  MoreHorizontal,
  ChevronLeft,
} from "lucide-react";
import AssessmentResult from "../components/AssessmentResult";
import "../styles/assessment.css";

// Categories for mental health assessment
const categories = [
  {
    id: "love",
    title: "T√¨nh y√™u",
    icon: Heart,
    description: "ƒê√°nh gi√° v·ªÅ c√°c v·∫•n ƒë·ªÅ t√¨nh c·∫£m v√† m·ªëi quan h·ªá l√£ng m·∫°n",
    color: "#FF9F1C",
  },
  {
    id: "family",
    title: "Gia ƒë√¨nh",
    icon: Home,
    description:
      "ƒê√°nh gi√° v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn gia ƒë√¨nh v√† m·ªëi quan h·ªá trong nh√†",
    color: "#FF6B6B",
  },
  {
    id: "friend",
    title: "B·∫°n b√®",
    icon: Users,
    description: "ƒê√°nh gi√° v·ªÅ c√°c m·ªëi quan h·ªá b·∫°n b√® v√† t∆∞∆°ng t√°c x√£ h·ªôi",
    color: "#4ECDC4",
  },
  {
    id: "study",
    title: "H·ªçc t·∫≠p",
    icon: Book,
    description: "ƒê√°nh gi√° v·ªÅ √°p l·ª±c h·ªçc t·∫≠p v√† ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai",
    color: "#2EC4B6",
  },
  {
    id: "social",
    title: "M·∫°ng x√£ h·ªôi",
    icon: Globe,
    description: "ƒê√°nh gi√° v·ªÅ ·∫£nh h∆∞·ªüng c·ªßa m·∫°ng x√£ h·ªôi ƒë·∫øn cu·ªôc s·ªëng",
    color: "#E71D36",
  },
  {
    id: "other",
    title: "Kh√°c",
    icon: MoreHorizontal,
    description: "ƒê√°nh gi√° v·ªÅ c√°c v·∫•n ƒë·ªÅ kh√°c trong cu·ªôc s·ªëng",
    color: "#6C63FF",
  },
];

// Results based on category and answers
const results = {
  family: {
    a: {
      title: "M·ªëi quan h·ªá gia ƒë√¨nh t·ªët",
      description:
        "B·∫°n c√≥ m·ªëi quan h·ªá gia ƒë√¨nh r·∫•t t·ªët. H√£y ti·∫øp t·ª•c duy tr√¨ v√† ph√°t tri·ªÉn c√°c m·ªëi quan h·ªá n√†y.",
      recommendations: [
        "D√†nh th·ªùi gian ch·∫•t l∆∞·ª£ng cho gia ƒë√¨nh",
        "Ti·∫øp t·ª•c chia s·∫ª v√† l·∫Øng nghe",
        "T·ªï ch·ª©c c√°c ho·∫°t ƒë·ªông gia ƒë√¨nh th∆∞·ªùng xuy√™n",
      ],
    },
    b: {
      title: "M·ªëi quan h·ªá gia ƒë√¨nh kh√° t·ªët",
      description:
        "M·ªëi quan h·ªá gia ƒë√¨nh c·ªßa b·∫°n kh√° ·ªïn, nh∆∞ng c√≥ th·ªÉ c·∫£i thi·ªán th√™m.",
      recommendations: [
        "C·∫£i thi·ªán giao ti·∫øp trong gia ƒë√¨nh",
        "Gi·∫£i quy·∫øt c√°c xung ƒë·ªôt nh·ªè k·ªãp th·ªùi",
        "TƒÉng c∆∞·ªùng c√°c ho·∫°t ƒë·ªông gia ƒë√¨nh",
      ],
    },
    c: {
      title: "C·∫ßn c·∫£i thi·ªán m·ªëi quan h·ªá gia ƒë√¨nh",
      description: "B·∫°n ƒëang g·∫∑p m·ªôt s·ªë v·∫•n ƒë·ªÅ trong m·ªëi quan h·ªá gia ƒë√¨nh.",
      recommendations: [
        "T√¨m hi·ªÉu nguy√™n nh√¢n c·ªßa m√¢u thu·∫´n",
        "H·ªçc c√°ch giao ti·∫øp hi·ªáu qu·∫£",
        "T√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° t·ª´ chuy√™n gia n·∫øu c·∫ßn",
      ],
    },
    d: {
      title: "M·ªëi quan h·ªá gia ƒë√¨nh c·∫ßn ƒë∆∞·ª£c quan t√¢m",
      description:
        "M·ªëi quan h·ªá gia ƒë√¨nh c·ªßa b·∫°n ƒëang g·∫∑p nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng.",
      recommendations: [
        "T√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° t·ª´ chuy√™n gia t√¢m l√Ω",
        "Tham gia c√°c bu·ªïi t∆∞ v·∫•n gia ƒë√¨nh",
        "H·ªçc c√°ch ƒë·∫∑t ranh gi·ªõi l√†nh m·∫°nh",
      ],
    },
  },
  // ... Similar result structures for other categories
};

function Assessment() {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [showResults, setShowResults] = useState(false);
  const [questions, setQuestions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [totalScore, setTotalScore] = useState(0);
  const [answerPoints, setAnswerPoints] = useState({});
  const [type, setType] = useState(null);
  const navigate = useNavigate();

  const fetchQuestions = async (categoryId) => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await axios.get(`http://localhost:8080/api/questions`, {
        params: {
          type: categoryId,
        },
      });

      // Transform the API response data structure
      const transformedQuestions = response.data.map((item) => ({
        id: item.questions.questionId,
        question: item.questions.questionContent,
        options: item.answers.map((answer) => ({
          id: answer.answerId.toString(),
          text: answer.answerContent,
          emoji: getEmojiForAnswer(answer.answerPoint), // Helper function to assign emojis based on answer point
          answerPoint: answer.answerPoint,
        })),
      }));

      setQuestions(transformedQuestions);
      console.log("Transformed questions:", transformedQuestions);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch questions");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper function to assign emojis based on answer point
  const getEmojiForAnswer = (point) => {
    const emojis = {
      1: "üòä", // R·∫•t ƒë·ªìng √Ω
      2: "üôÇ", // ƒê·ªìng √Ω
      3: "üòê", // Kh√¥ng ch·∫Øc ch·∫Øn
      4: "üòï", // Kh√¥ng ƒë·ªìng √Ω
      5: "üòî", // R·∫•t kh√¥ng ƒë·ªìng √Ω
    };
    return emojis[point] || "ü§î";
  };

  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
    fetchQuestions(category.id);
    setType(category.id);
  };

  const handleAnswer = (questionId, optionId, answerPoint) => {
    // L∆∞u ƒëi·ªÉm s·ªë c·ªßa c√¢u tr·∫£ l·ªùi c≈© (n·∫øu c√≥) ƒë·ªÉ tr·ª´ ƒëi
    const oldPoint = answerPoints[questionId] || 0;

    // C·∫≠p nh·∫≠t answers nh∆∞ c≈©
    setAnswers({
      ...answers,
      [questionId]: optionId,
    });

    // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë cho c√¢u h·ªèi hi·ªán t·∫°i
    setAnswerPoints({
      ...answerPoints,
      [questionId]: answerPoint,
    });

    // C·∫≠p nh·∫≠t t·ªïng ƒëi·ªÉm: tr·ª´ ƒëi·ªÉm c≈© (n·∫øu c√≥) v√† c·ªông ƒëi·ªÉm m·ªõi
    setTotalScore((prevScore) => prevScore - oldPoint + answerPoint);
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResults(true);
      // Extract only serializable properties from selectedCategory
      const { id, title, description, color } = selectedCategory;
      navigate("/result", {
        // Navigate to AssessmentResult page
        state: {
          answers,
          category: { id, title, description, color }, // Pass only serializable data
          questions,
          totalScore,
          type,
        },
      });
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const resetAssessment = () => {
    setSelectedCategory(null);
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
    setQuestions([]);
    setTotalScore(0);
    setAnswerPoints({});
  };

  const isQuestionAnswered = (questionId) => {
    return answers[questionId] !== undefined;
  };

  const progressPercentage = questions.length
    ? ((currentQuestion + 1) / questions.length) * 100
    : 0;

  return (
    <main className="assessment-main">
      <div className="assessment-card">
        {!selectedCategory ? (
          <div className="category-selection">
            <h2>Ch·ªçn lƒ©nh v·ª±c b·∫°n mu·ªën ƒë√°nh gi√°</h2>
            <div className="category-grid">
              {categories.map((category) => {
                const Icon = category.icon;
                return (
                  <div
                    key={category.id}
                    className="category-card"
                    onClick={() => handleCategorySelect(category)}
                    style={{ backgroundColor: category.color }}
                  >
                    <Icon className="category-icon" />
                    <h3>{category.title}</h3>
                    <p>{category.description}</p>
                  </div>
                );
              })}
            </div>
          </div>
        ) : !showResults ? (
          <>
            {isLoading ? (
              <div className="loading">ƒêang t·∫£i c√¢u h·ªèi...</div>
            ) : error ? (
              <div className="error">
                <p>{error}</p>
                <button
                  className="action-button primary"
                  onClick={() => fetchQuestions(selectedCategory.id)}
                >
                  Th·ª≠ l·∫°i
                </button>
              </div>
            ) : questions.length > 0 ? (
              <>
                <div className="assessment-progress">
                  <div className="progress-bar">
                    <div
                      className="progress-fill"
                      style={{ width: `${progressPercentage}%` }}
                    ></div>
                  </div>
                  <div className="progress-text">
                    C√¢u h·ªèi {currentQuestion + 1} tr√™n {questions.length}
                  </div>
                </div>

                <div className="question-container">
                  <button
                    className="back-button"
                    onClick={() => setSelectedCategory(null)}
                  >
                    <ChevronLeft className="back-icon" />
                    Quay l·∫°i
                  </button>

                  <h2 className="question-text">
                    {questions[currentQuestion].question}
                  </h2>

                  <div className="options-container">
                    {questions[currentQuestion].options.map((option) => (
                      <div
                        key={option.id}
                        className={`option ${
                          answers[questions[currentQuestion].id] === option.id
                            ? "selected"
                            : ""
                        }`}
                        onClick={() =>
                          handleAnswer(
                            questions[currentQuestion].id,
                            option.id,
                            option.answerPoint
                          )
                        }
                      >
                        <div className="option-emoji">{option.emoji}</div>
                        <div className="option-text">{option.text}</div>
                        {answers[questions[currentQuestion].id] ===
                          option.id && <CheckCircle className="check-icon" />}
                      </div>
                    ))}
                  </div>
                </div>

                <div className="assessment-actions">
                  <button
                    className="action-button secondary"
                    onClick={handlePrevious}
                    disabled={currentQuestion === 0}
                  >
                    Quay v·ªÅ c√¢u tr∆∞·ªõc
                  </button>
                  <button
                    className="action-button primary"
                    onClick={handleNext}
                    disabled={
                      !isQuestionAnswered(questions[currentQuestion].id)
                    }
                  >
                    {currentQuestion < questions.length - 1
                      ? "Ti·∫øp theo"
                      : "Xem k·∫øt qu·∫£"}
                    {currentQuestion < questions.length - 1 && (
                      <ArrowRight className="button-icon" />
                    )}
                  </button>
                </div>
              </>
            ) : (
              <div className="no-questions">
                <p>Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi cho lƒ©nh v·ª±c n√†y</p>
                <button
                  className="action-button primary"
                  onClick={() => setSelectedCategory(null)}
                >
                  Ch·ªçn lƒ©nh v·ª±c kh√°c
                </button>
              </div>
            )}
          </>
        ) : (
          <Link
            to="/result"
            element={
              <AssessmentResult
                answers={answers}
                category={selectedCategory}
                questions={questions}
                totalScore={totalScore}
                type={type}
                onReset={resetAssessment}
              />
            }
          />
        )}
      </div>
    </main>
  );
}

export default Assessment;
